import React, { createContext, useContext, useState, useEffect } from 'react';

const AuthContext = createContext({});

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [userStats, setUserStats] = useState({
    totalAnalyses: 0,
    threatsStopped: 0,
    communityPoints: 20,
    securityScore: 95,
    streak: 4
  });

  // ✅ UNIVERSAL LOGIN - Works for ANY email address
  const login = async (email, password) => {
    try {
      setLoading(true);
      
      // Basic validation
      if (!email || !password) {
        throw new Error('Email and password are required');
      }
      
      if (!email.includes('@')) {
        throw new Error('Please enter a valid email address');
      }
      
      if (password.length < 3) {
        throw new Error('Password must be at least 3 characters');
      }

      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Generate user profile from email
      const displayName = generateDisplayName(email);
      const mockUser = {
        uid: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        email: email.toLowerCase(),
        displayName: displayName,
        photoURL: `https://ui-avatars.com/api/?name=${encodeURIComponent(displayName)}&background=8b5cf6&color=fff&size=128`,
        emailVerified: true,
        createdAt: new Date().toISOString(),
        lastLoginAt: new Date().toISOString()
      };

      setUser(mockUser);

      // Generate personalized stats
      const personalizedStats = {
        totalAnalyses: Math.floor(Math.random() * 50) + 10,
        threatsStopped: Math.floor(Math.random() * 15) + 3,
        communityPoints: Math.floor(Math.random() * 100) + 20,
        securityScore: Math.floor(Math.random() * 30) + 70,
        streak: Math.floor(Math.random() * 10) + 1,
        level: Math.floor(Math.random() * 5) + 1,
        reputation: getRandomReputation(),
        joinDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString()
      };

      setUserStats(personalizedStats);
      localStorage.setItem(`xist-stats-${mockUser.uid}`, JSON.stringify(personalizedStats));
      localStorage.setItem('xist-user', JSON.stringify(mockUser));
      
      return { success: true, user: mockUser };
    } catch (error) {
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  // ✅ FIXED LOGOUT - Properly clears ALL localStorage data
  const logout = async () => {
    try {
      // Clear current user's stats if exists
      if (user && user.uid) {
        localStorage.removeItem(`xist-stats-${user.uid}`);
      }
      
      // Clear all Xist-related localStorage items
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('xist-')) {
          localStorage.removeItem(key);
        }
      });
      
      // Reset state
      setUser(null);
      setUserStats({
        totalAnalyses: 0,
        threatsStopped: 0,
        communityPoints: 20,
        securityScore: 95,
        streak: 4
      });
      
      return { success: true };
    } catch (error) {
      console.error('Logout error:', error);
      return { success: false, error: error.message };
    }
  };

  const updateUserStats = (newStats) => {
    const updatedStats = { ...userStats, ...newStats };
    setUserStats(updatedStats);
    if (user) {
      localStorage.setItem(`xist-stats-${user.uid}`, JSON.stringify(updatedStats));
    }
  };

  // ✅ FIXED Auto-login - Only runs ONCE and has proper error handling
  useEffect(() => {
    const checkAuthState = async () => {
      try {
        const savedUser = localStorage.getItem('xist-user');
        if (savedUser) {
          const userData = JSON.parse(savedUser);
          
          // Validate the saved user data
          if (userData.uid && userData.email) {
            setUser(userData);
            
            const savedStats = localStorage.getItem(`xist-stats-${userData.uid}`);
            if (savedStats) {
              setUserStats(JSON.parse(savedStats));
            }
          } else {
            // Invalid user data, clear it
            localStorage.removeItem('xist-user');
          }
        }
      } catch (error) {
        console.error('Auth state check error:', error);
        // Clear corrupted localStorage data
        localStorage.removeItem('xist-user');
      }
    };

    checkAuthState();
  }, []); // ✅ Only runs once on mount

  const value = {
    user,
    loading,
    userStats,
    login,
    logout,
    updateUserStats
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// Helper function to generate display name from email
const generateDisplayName = (email) => {
  const username = email.split('@')[0];
  
  // Convert common patterns to names
  const nameMappings = {
    'john.doe': 'John Doe',
    'jane.smith': 'Jane Smith',
    'admin': 'Administrator',
    'test': 'Test User',
    'demo': 'Demo User',
    'rshozab64': 'Shozab Rizvi' // Keep your original name mapping
  };
  
  if (nameMappings[username.toLowerCase()]) {
    return nameMappings[username.toLowerCase()];
  }
  
  // Convert username to proper case
  return username
    .replace(/[._-]/g, ' ')
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');
};

// Helper function for random reputation
const getRandomReputation = () => {
  const reputations = [
    'New Member', 'Active Member', 'Trusted Member', 
    'Security Expert', 'Community Leader', 'Veteran Analyst'
  ];
  return reputations[Math.floor(Math.random() * reputations.length)];
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext;
